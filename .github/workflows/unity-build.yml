name: unity-build
permissions:
  contents: read
on:
  workflow_call:
    inputs:
      matrix:
        required: true
        type: string
    secrets:
      UNITY_USERNAME:
        required: true
      UNITY_PASSWORD:
        required: true
jobs:
  build:
    name: ${{ matrix.name }}
    strategy:
      matrix: ${{ fromJSON(inputs.matrix) }}
      fail-fast: false
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
    env:
      UNITY_PROJECT_PATH: '' # Set from create-project step
      RUN_BUILD: '' # Set to true if the build pipeline package can be installed and used
    steps:
      - name: Free Disk Space
        if: ${{ matrix.os == 'ubuntu-latest' && matrix.unity-version == '6000.2' }}
        uses: endersonmenezes/free-disk-space@713d134e243b926eba4a5cce0cf608bfd1efb89a # v2.1.1
        with:
          remove_android: true
          remove_dotnet: false
          remove_tool_cache: false
      - uses: actions/checkout@v5
      - uses: actions/setup-node@v4
        with:
          node-version: 24.x
      - name: Setup unity-cli
        shell: bash
        run: |
          npm ci
          npm run build
          npm run link
          unity-cli --version
      - name: Setup Unity
        shell: bash
        timeout-minutes: 30
        run: |
          unity-cli hub-install --auto-update
          unity-cli setup-unity --unity-version "${{ matrix.unity-version }}" --build-targets "${{ matrix.build-target }}" --json
      - name: Verify UNITY_HUB_PATH and UNITY_EDITOR_PATH variables
        shell: bash
        run: |
          echo "UNITY_HUB_PATH: ${UNITY_HUB_PATH}"
          echo "UNITY_EDITOR_PATH: ${UNITY_EDITOR_PATH}"
          echo "UNITY_PROJECT_PATH: ${UNITY_PROJECT_PATH}" # Expected to be empty at this point

          if [ -z "${UNITY_HUB_PATH}" ]; then
            echo "Error: UNITY_HUB_PATH is not set"
            exit 1
          fi

          if [ -z "${UNITY_EDITOR_PATH}" ]; then
            echo "Error: UNITY_EDITOR_PATH is not set"
            exit 1
          fi
      - name: Activate License
        shell: bash
        run: |
          unity-cli activate-license --license personal --email "${{ secrets.UNITY_USERNAME }}" --password "${{ secrets.UNITY_PASSWORD }}"
      - name: Create Unity Project
        shell: bash
        run: |
          unity-cli list-project-templates --unity-editor "${UNITY_EDITOR_PATH}" --json
          unity-cli create-project --name "Unity Project" --unity-editor "${UNITY_EDITOR_PATH}" --json
      - name: Verify UNITY_PROJECT_PATH variable
        shell: bash
        run: |
          if [ -z "${UNITY_PROJECT_PATH}" ]; then
            echo "Error: UNITY_PROJECT_PATH is not set"
            exit 1
          fi
          # check if the project can be built. Only Unity 2019.4+ and newer majors support the build pipeline package
          version="${{ matrix.unity-version }}"
          # extract major and minor (minor may be empty if version is just '2019' etc.)
          major=$(echo "$version" | cut -d'.' -f1)
          minor=$(echo "$version" | cut -d'.' -f2)
          if [ -z "$minor" ]; then
            minor=0
          fi
          # numeric comparison: enable build for major > 2019 or major == 2019 and minor >= 4
          if [ "$major" -gt 2019 ] || { [ "$major" -eq 2019 ] && [ "$minor" -ge 4 ]; }; then
            echo "Proceeding with build for Unity version $version"
            echo "RUN_BUILD=true" >> $GITHUB_ENV
          else
            echo "Skipping build: Unity version $version does not support the build pipeline package (requires 2019.4+)"
          fi
      - name: Install OpenUPM and build pipeline package
        shell: bash
        if: ${{ env.RUN_BUILD == 'true' }}
        run: |
          npm install -g openupm-cli
          cd "${UNITY_PROJECT_PATH}"
          openupm add com.utilities.buildpipeline
      - name: Update Android Target Sdk Version
        if: ${{ matrix.build-target == 'Android' }}
        shell: bash
        run: |
          # update AndroidTargetSdkVersion to 32 in ProjectSettings/ProjectSettings.asset
          sed -i 's/AndroidTargetSdkVersion: [0-9]*/AndroidTargetSdkVersion: 32/' "${UNITY_PROJECT_PATH}/ProjectSettings/ProjectSettings.asset"
          # ensure android dependencies are installed
          unity-cli setup-unity -p "${UNITY_PROJECT_PATH}" -m android
      - name: Build Project
        if: ${{ env.RUN_BUILD == 'true' }}
        timeout-minutes: 60
        shell: bash
        run: |
          unity-cli run --log-name Validate -quit -nographics -batchmode -executeMethod Utilities.Editor.BuildPipeline.UnityPlayerBuildTools.ValidateProject -importTMProEssentialsAsset
          unity-cli run --log-name Build -quit -nographics -batchmode -buildTarget ${{ matrix.build-target }} -executeMethod Utilities.Editor.BuildPipeline.UnityPlayerBuildTools.StartCommandLineBuild -sceneList Assets/Scenes/SampleScene.unity ${{ matrix.build-args }}
      - name: Uninstall Editor
        shell: bash
        run: |
          if [ -z "${UNITY_EDITOR_PATH}" ]; then
            echo "UNITY_EDITOR_PATH is not set, skipping uninstall"
            exit 0
          fi
          unity-cli uninstall-unity --unity-editor "${UNITY_EDITOR_PATH}"
      - name: Return License
        if: always()
        shell: bash
        run: |
          unity-cli return-license --license personal
      - name: Upload Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.run_id }}.${{ github.run_attempt }} ${{ matrix.os }} ${{ matrix.unity-version }} ${{ matrix.build-target }} logs
          retention-days: 1
          path: |
            ${{ github.workspace }}/**/*.log
